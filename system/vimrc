" You might have to force true color when using regular vim inside tmux as the
" colorscheme can appear to be grayscale with "termguicolors" option enabled.
" vim-only 
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

if has('cursorshape')
	"Mode Settings
	let &t_SI.="\<Esc>[5 q" "SI = INSERT mode
	let &t_SR.="\<Esc>[4 q" "SR = REPLACE mode
	let &t_EI.="\<Esc>[0 q" "EI = NORMAL mode (ELSE)
	"Cursor settings:
	"  0 -> DECSCUSR (terminal default)
	"  1 -> blinking block
	"  2 -> solid block 
	"  3 -> blinking underscore
	"  4 -> solid underscore
	"  5 -> blinking vertical bar
	"  6 -> solid vertical bar
endif

"let $NVIM_TUI_ENABLE_TRUE_COLOR=1

"set gcr=n-v-c:block-Cursor/lCursor,ve:ver35-Cursor,o:hor50-Cursor,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor,sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

set t_Co=256
set termguicolors

"" auto reload vimrc 
set secure

set lazyredraw
set exrc

set ttymouse=xterm2
set mouse=a
" fxck visual bells!!!
set vb t_vb= 
"set visualbell

"set autowrite
"" auto save
"set autowriteall
"set mousehide
"
filetype plugin indent on
syntax on
set nocompatible
set sidescroll=10
set cursorline
set showcmd

"highlight Comment cterm=italic

set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

"set title
"set titleold="Terminal"
"set titlestring=%F

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c) 

" colorscheme zenburn
"set background=light
"colorscheme delek

" colorscheme default
set background=dark
colorscheme habamax

if exists("g:neovide")
   set guifont=Monospace:h11 " require hidpi
endif


"" Disable cursor blinking

set scrolloff=3
"" Status bar
set laststatus=2


"" Fix backspace indent
set backspace=indent,eol,start

"set number
"set relativenumber
"

set autoindent
set smartindent
set textwidth=80
set colorcolumn=80
nnoremap \cc :set colorcolumn=80<cr>
nnoremap \ncc :set colorcolumn-=80<cr>

" vertical align char
set list lcs=tab:Â¦\      

"set smarttab
"" Tabs. May be overridden by autocmd rules

set tabstop=8
set shiftwidth=8
set softtabstop=8

"set tabstop=4
"set shiftwidth=4
"set softtabstop=4
"set expandtab

set splitright
set splitbelow


"" Map leader to '',
let mapleader= " "

"" Enable hidden buffers
set hidden

set nobackup
set nowritebackup
set autoread
set noswapfile

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

set clipboard+=unnamedplus

nnoremap n nzzzv
nnoremap N Nzzzv

set fileformats=unix,dos,mac

"*****************************************************************************
"" Abbreviations
"*****************************************************************************
"" no one is really happy until you have this shortcuts
cnoreabbrev Q q
cnoreabbrev Q! q!
cnoreabbrev Qall qall
cnoreabbrev Qall! qall!
cnoreabbrev W w
cnoreabbrev W! w!
cnoreabbrev WQ wq
cnoreabbrev Wa wa
cnoreabbrev Wq wq
cnoreabbrev wQ wq

"" Buffer controls / movements
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> =b :ls<CR>
nnoremap <silent> \b :bd<CR>
" noremap <leader>c :bd<CR>

"" quickfix controls 
nnoremap <silent> [q :cp<CR>
nnoremap <silent> ]q :cn<CR>
nnoremap <silent> =q :copen<CR>
nnoremap <silent> \q :cclose<CR>

"" jump history >> qf
nnoremap <silent><leader>j :call setqflist(getjumplist()[0], 'r')<CR>:copen<CR>

"" buffers >> qf
nnoremap <silent><leader>b :call setqflist(getbufinfo({'buflisted': 1}), 'r')<CR>:copen<CR>

" tab ctrl
nnoremap <silent><nowait>=t :tabnew<cr>
nnoremap <silent><nowait>\t :tabc<cr>
nnoremap <silent><nowait>[t :tabp<cr>
nnoremap <silent><nowait>]t :tabn<cr>

" save as sudo
cmap w!! w !sudo tee > /dev/null %

" mkdir before save, if not already exist
augroup Mkdir
  autocmd!
  autocmd BufWritePre * call mkdir(expand("<afile>:p:h"), "p")
augroup END

"save undo / redo across sessions
set undofile
set undodir=~/.vim/undo

" treat underscore (_) as a word  TODO au
" set iskeyword+=_
" set iskeyword+==

set isfname-==

"" Sensible Nav -- no longer needed because for the tmux-nav 
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>

set splitbelow
set splitright

" Finding Files:
" Search down into subfolders

"better wildmenu
set path+=**
set wildmenu
set wildmode=longest:full

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

command! MakeTags !ctags -R .

if executable("rg")
    set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
    set grepformat=%f:%l:%c:%m
endif
augroup quickfix
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost l* lwindow
augroup END

"set gp=git\ grep\ -n

" File browser:
"let g:netrw_banner=0
"let g:netrw_browse_split=4
"let g:netrw_altv=1
"let g:netrw_liststyle=3
"let g:netrw_list_hide=netrw_gitignore#Hide()


"" Set working directory to current buffer
noremap <leader>. :lcd %:p:h<CR>

"" find the nearest git as the root 
func! s:FindRoot()
	let s:git_dir = finddir(".git", getcwd() .';')
	if !empty(s:git_dir)
		if s:git_dir == ".git"|let s:git_dir=getcwd()
		else|let s:git_dir=strpart(s:git_dir, 0, strridex(s:git_dir, "/"))
		endif
		return s:git_dir
	endif
	return ""
endfunc

"" line objects
onoremap <silent>il :<C-U>normal! ^v$BE<CR>
xnoremap <silent>il :<C-U>normal! ^v$<CR><LEFT>
onoremap <silent>al :<C-U>normal! 0v$<CR>
xnoremap <silent>al :<C-U>normal! 0v$<CR>

"" Insert mode emacs alike bindings (not a good idea?)

"inoremap <C-E> <END>
"inoremap <C-A> <C-O>^
"inoremap <C-D> <DEL>
"vnoremap <C-D> <DEL>
"inoremap <C-F> <C-O>w
"inoremap <C-V> <C-O>D
"inoremap <C-E> <END>

""

"" Opens an edit command with the path of the currently edited file filled in
"" next to the current file, in the same directory
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
cnoremap <C-E> <C-R>=expand("%:p:h") . "/" <CR>


"" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

"" Buffer nav
" noremap <leader>z :bp<CR>
" noremap <leader>w :bn<CR>
"noremap <A-Left> :bp<CR>
"noremap <A-Right> :bp<CR>
noremap <Space><Space> :b#<CR>

"" Clear search highlights
nnoremap <silent> <leader>, :noh<cr>

"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Move visual block
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv

" Better display for messages # deprecated for neovim, as the pop-up menu is 
" fine.
set cmdheight=1

" You will have bad experience for diagnostic messages when it's default
" 4000.
set updatetime=300

" set complete+=kspell
set completeopt=menu,menuone,longest,preview,popup
" set not to search from included files , we use tags as instead (otherwise too
" slow !!!)
set complete-=i
"set omnifunc=syntaxcomplete#Complete
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumn
set signcolumn=yes

set spell
setlocal spell spelllang=en_au


" Wrapping options 
set formatoptions=tc " wrap text and comments using textwidth
set formatoptions+=r " continue comments when pressing ENTER in I mode
set formatoptions+=q " enable formatting of comments with gq
set formatoptions+=n " detect lists for formatting
set formatoptions+=b " auto-wrap in insert mode, and do not wrap old long lines

"" TAB and CTRL-I are internally identical, uncomment this if you prefer TAB
"" and never gonna use CTRL + I/O
"nnoremap <Tab> gt
"nnoremap <S-Tab> gT
"nnoremap <silent> <S-t> :tabnew<CR>
"

"" Python rules
au BufNewFile,BufRead *.py set
	\ tabstop=4
	\ softtabstop=4
	\ shiftwidth=4
	\ textwidth=79
	\ expandtab
	\ autoindent
	\ fileformat=unix

"" html
au BufNewFile,BufRead *.js, *.html, *.css set
	\ tabstop=2
	\ softtabstop=2
	\ shiftwidth=2

" Go to the index of notes and set the working directory to my notes
nnoremap <leader>nn :e $NOTES_DIR/. <CR>:cd $NOTES_DIR<CR>

" find files and populate the quickfix list
fun! FindFiles(filename)
  let error_file = tempname()
  silent exe '!find . -name "'.a:filename.'" | xargs file | sed "s/:/:1:/" > '.error_file
  set errorformat=%f:%l:%m
  exe "cfile ". error_file
  copen
  call delete(error_file)
endfun
command! -nargs=1 FindFile call FindFiles(<q-args>)

"" Find Recent Files 
func s:RecentFile()
	let files = split(execute("oldfiles")) | let result = []
	for key in files
		if filereadable(key)
			let value = {} | let value['filename'] = key | call insert(result, value)
		endif
	endfor
	let result = reverse(result) | call setqflist(result, 'r') | copen
endfunc
nnoremap <silent><leader>r :call <sid>RecentFile()<CR>
